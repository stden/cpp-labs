// Файл: Main.cpp
// Основная программа
// Автор: Волынко Е. ст. гр. 7304
// Дата: 20.09.2010 Редакция: 1.0

#include "CMsg.h"
#include "CServer.h"
#include "CClient.h"
#include "CoList.h"
#include <iostream.h>
#include <conio.h>
#include <values.h>
#include <assert.h>

// Input value from "cin" with error checking
template <class T>
T input(char *prompt, T min, T max){
  T value;
  do{
    cout << prompt << " " << min << ".." << max << ": ";
    while(!(cin >> value)/* && !cin.eof()*/) {
      cerr << "Error: invalid input " << value << ", try again: ";
      cin.clear();
      cin.ignore(cin.rdbuf()->in_avail());
    }
    if(value < min)
      cerr << "Error: Required value >= " << min <<endl;
    if(value > max)
      cerr << "Error: Required value <= " << max <<endl;
  } while(value < min || value > max);
  return value;
}

int inputClientID(char *prompt){
  if(CClient::getCurrent() < 1){
    cout << "Register at least one client at first" << endl;
    return 0;
  };
  return input(prompt,1,CClient::getTotal());
}

int inputMessageCode(){
  return input("Enter code of message, u want to send",2,99);
}

float inputInfoField(){
  return input("Enter info field",MINFLOAT,MAXFLOAT);
}

int main() {
  clrscr();
  cout << endl << endl << "----------------------------------------------------"<<endl;
  cout << "Programm is modeling of Client->Server->Client message exchange"<<endl
    << "with confirmation of Server->Client interaction."<<endl
    << "Programmed by: Evgeny Volinko"<<endl
    << "----------------------------------------------------"<<endl;

  int menu;
  CServer server;
  CList<CClient*> clients;

  do{
    cout << endl
      << "Main Menu" << endl 
      << "  1. Create Client"<<endl
      << "  2. Registrate on server"<<endl
      << "  3. Registrate all clients on server"<<endl
      << "  4. Unregistrate client from server"<<endl
      << "  5. Unregistrate all clients from server"<<endl
      << "  6. Send message Client -> Server"<<endl
      << "  7. Send message Server -> Client"<<endl
      << "  8. Print clients info"<<endl
      << "  9. Print all clients info"<<endl
      << "  10. Exit"<<endl << endl;

    menu = input("Your choice",1,11);
    cout << endl;
    switch (menu) {
      case 1:
        cout << "== 1. Create Client ==" << endl;
        CClient* cl = new CClient;
        if (cl) {
	  clients.insert(cl);
	  cout << "New client added #" << cl->getID() << endl;
	  assert(server.GetClientByID(cl->getID()) == NULL);
	} else
	  cout << "Error while create client!" << endl;
	break;
      case 2:
	cout << "== 2. Registrate on server ==" << endl;
	int id = inputClientID("Enter id of client to register");
	clients.goFirst();
	if(clients.getCurrent()!=NULL)
	  do{
	    if (clients.getElem().getValue()->getID() == id) {
	      server.Register(clients.getElem().getValue());
	      break;
	    }
	  } while(clients.goNext());
	assert(server.GetClientByID(id) != NULL);
	break;
      case 3: {
	cout << "== 3. Registrate all clients on server ==" << endl;
	clients.goFirst();
	if(clients.getCurrent()!=NULL)
	  do{
	    server.Register(clients.getElem().getValue());
	    assert(server.GetClientByID(clients.getElem().getValue()->getID()) != NULL);
	  } while(clients.goNext());
	break;
      };
      case 4: {
	cout << "== 4. Unregistrate client from server ==" << endl;
	int tid = inputClientID("Enter id of client to unregister");
	server.Unregister(tid);
	assert(server.GetClientByID(id) == NULL);
	break;
      };
      case 5:
	cout << "== 5. Unregistrate all clients from server ==" << endl;
	server.UnregisterAll();
	break;
      case 6: {
	cout << "== 6. Send message Client -> Server ==" << endl;
	int tid = inputClientID("Enter id of client");
	if(tid==0) break;
	int tcode = inputMessageCode();
	float tinfo = inputInfoField();
	cout << endl;
	clients.goFirst();
	if(clients.getCurrent()!=NULL)
	  do{
	    if (clients.getElem().getValue()->getID() == tid) {
	      clients.getElem().getValue()->
		SendMessage(tcode,tinfo,server.getID());
	      break;
	    }
	  } while(clients.goNext());
	break;
	      }
      case 7: {
	cout << "== 7. Send message Server -> Client ==" << endl;
	int tid = inputClientID("Enter id of client");
	if(tid==0) break;
	int tcode = inputMessageCode();
	float tinfo = inputInfoField();
	cout << endl;
	server.SendMessage(
	  new CMessage(server.getID(),tid,tcode,tinfo,Server_to_Client),tid);
	break;
	      }
      case 8: {
	cout << "== 8. Print clients info ==" << endl;
	int tid = inputClientID("Enter id of client, which info u want to look");
	cout << endl;
	clients.goFirst();
	if(clients.getCurrent()!=NULL)
	  do{
	    if (clients.getElem().getValue()->getID() == tid) {
	      clients.getElem().getValue()->Print();
	      break;
	    }
	  } while(clients.goNext());
	break;
      }
      case 9: {
	cout << "== 9. Print all clients info ==" << endl;
	clients.goFirst();
	if(clients.getCurrent()!=NULL)
	  do{
	    clients.getElem().getValue()->Print();
	    cout << "-- Press any key to continue or ESC to exit -- "<<endl;
	    if (getch() == 27) break; // Waiting for some action
	  } while(clients.goNext());
	break;
      }
      default:
	return 0;
    }
  } while(menu!=10);
  return 0;
}