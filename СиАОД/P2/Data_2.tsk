Тема 2. СТЕК.

0. Вводные замечания. [2]

   Программы обработки данных обычно оперируют с таблицами инфор-
мации.  Обычно это не просто аморфные множества чисел,  а совкуп-
ности,  подчиняющиеся определенным структурным  отношениям  между
элементами таблиц:
     - какой элемент является первым, какой последним;
     - правила, по которым определяется последовательность
       элементов в таблице;
     - правила, определяющие связи между различными таблицами.
( Массив;  многомерный массив;  массив ссылок на другие  массивы;
два массива, элементы одного из которых определяют порядок разме-
щения элементов в другом.)

   Для грамотного использования машины при программировании обра-
ботки  данных необходимо хорошее понимание структурных отношений,
существующих между данными, способов представления таких структур
и методов работы с ними.

1. Определение стека.

   Линейный список  -  множество,  состоящее  из  n > 0 элементов
X[i], n >= i > 0. Структурные свойства линейного списка ограничи-
ваются линейным (последовательным) расположением элементов:
      - X[1] - первый элемент;
      - X[n] - последний элемент;
      - элементу X[k] (n > k > 1) предшествует элемент X[k-1] и
        элемент X[k+1] следует за ним.
   Линейный список из n элементов (при n = бесконечности  опреде-
ляется  неограниченный список) с k значениями элементов X называ-
ется стэком, если в этом списке допускается чтение значения толь-
ко  последнего  элемента  X[k]  - вершины стека и запись значения
только элемента X[k+1].  При чтении значения вершины X[k], верши-
ной становится элемент X[k-1].

     │
     │              │
     │              │
     +--------------+
     │     X[k]     │   <-   вершина стека, Указатель_на_вершину;
     +--------------+
            .       │
            .
     │      .
     +--------------+
     │     X[2]     │
     +--------------+
     │     X[1]     │
     L---------------

   Задание структурных отношений между элементами указывает на их
"геометрическое" расположение,  определяющее структуру множества,
структуру данных,  что недостаточно для использования таких  дан-
ных.  Для того, чтобы определяемая структура была полезной, необ-
ходимо определить множество операций, допустимых над данными.

   Операции над стеком:

    основные

       - записать значение F в стек S -
                                         Push(F,S);

               Указатель_на_вершину:= Указатель_на_вершину - 1;
               запись_значения_F_по_адресу_"Указатель_на_вершину";

       - прочитать содержимое стека S -
                                         Pop(S): тип_элемента;

               чтение_значения_по_адресу_"Указатель_на_вершину";
               Указатель_на_вершину:= Указатель_на_вершину + 1;

    дополнительные
       - проверить содержимое стека F -
                                         Empty(S): Boolean;

       - в реальной ситуации на память, отводящуюся под стек
         накладываются ограничения и в этом случае необходимым
         является наличие операции
                                         Full(S): Boolean;
                                        
       - прочитать содержимое вершины стека F -
                                         StackTop(S): тип_элемента;
         содержимое Указатель_на_вершину и значение вершины не
         изменяются;

2. Содержание задания.

   Реализовать стек как тип данных - структуру данных и множество операций,
определенных выше.
   Реализовать тестовую программу, иллюстрирующую возможность декларации
переменных типа СТЕК и выполнение всех действий над такими переменными.
   Реализовать пример, иллюстрирующий использование стека.

3. Требования к реализации.

       3.1. Разработанная структура должна представляться как тип
            данных,  предоставляющий возможность пользователю оп-
            ределять экземпляры элементов (данные) этого типа.

       3.2. Реализация  структуры  данных  и  множества  операций
            должны быть скрыты от их пользователя.

       3.3. Продумать возможность реализации типа "Стек" с  пара-
            метризацией типа его элементов.

       3.4. Необходима спецификация и реализация обработки исклю-
            чительных ситуаций.

       3.5. В качестве примера использования выбирается задача,  при прог-
раммировании которой целесообразно применение стека.
   Пример [1]:
   Написать программу, определяющую правильность расстановки трех
видов скобок - (), [], {} - в математическом выражении.

4. Требования к отчетной документации.

   Отчетная документация содержит следующие разделы.
      1. Постановка задачи.
      2. Принцип реализации.
         Приводится идея,  положенная в основу реализации задания
и обоснование реализации с точки  зрения  выполнения  требований,
приведенных выше.
      3. Описание и тексты программ.

     Примечание. При решении задания рекомендуется использовать следующие
 библиотечные процедуры

 Функция SizeOf(<имя_типа>): Integer - количество байтов, выделяемое
 под переменную типа имя_типа.

 Процедура GetMem(var P: Pointer; Size: Word) - создает в динамической памяти
 переменную, размером Size и передает указатель на нее в переменную P.

 Процедура Move(var Source, Dest; Count: Word) - перемещает значение
 переменной Source в переменную Dest, типы которых совместимы по размеру
 выделяемой памяти.

 Процедура FreeMem(var P: Pointer; Size: Word) - освобождает память, выде-
 ленную под  значение переменной с помощью процедуры GetMem.

 Функция MaxAvail: Longint - возвращает размер максимального блока свободной
 памяти в heap.


   Литература.

1. Й.  Лэнгсам. Структуры данных для персональных ЭВМ. - М.: Мир,
   1989.
2. Д. Кнут. Искусство программирования для ЭВМ. - М.: Мир, 1976.
