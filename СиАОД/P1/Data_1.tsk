Тема 1. Список

    Предметом изучения в этом  задании  являются  списки.  Список
представляет собой упорядоченную последовательность элементов.  В
большинстве приложений список однороден (элементы - одного типа),
однако иногда возникает потребность строить неоднородные списки.

    В зависимости от назначения списка используется тот или  иной
состав операций, выполняемых над списком, а так же тип  его  эле-
ментов. Однако практика программирования сформировала некую обоб-
щенную "универсальную" модель списка, которая может быть  принята
за основу, расширяемую в конкретных приложениях.

    Для эффективность "работы списка" зависит от его  реализации.
Все реализации базируются на абстрактной обобщенной модели 
списка, представляющей список как абстрактный тип данных.

              1.  Список: абстрактный тип данных
                           (СписокАТД)

ЭЛЕМЕНТЫ
    Элементы, составляющие список, относятся к  типу  LTem.  Этот
тип определяется (подставляется, генерируется) доступным в  языке
реализации  способом.

СТРУКТУРА
    Список относится к типу List.
    Элементы в списке образуют линейную последовательность:  эле-
менты следуют один за другим от начала списка (первого  элемента)
к концу списка (последнему элементу). Порядок  элементов  опреде-
лен в тот момент, когда каждый элемент вставлен в  список,  и  НЕ
ЗАВИСИТ от данных, содержащихся в каждом элементе.
    [Замечание. Хотя пользователь может обеспечить нужный ЕМУ по-
рядок элементов, это свойство списка является  внешним,  частным,
относящимся к интерпретации списка, но не частью его определения.]
    В любой момент времени для непустого  списка  определен  эле-
мент, называемый ТЕКУЩИМ ЭЛЕМЕНТОМ СПИСКА; вставка и удаление вы-
полняются относительно  текущего  элемента.


ОПЕРАЦИИ

procedure LtCreate ( var L: List)  {СОЗДАТЬ список}
Требования: Нет.
Результаты: Создан пустой список L.

procedure LtInsert ( var L: List; NewElem: LTem)  {ВСТАВИТЬ элемент}
Требования: Heт.
Результаты: Новый элемент со значеним NewElemn вставляется в спи-
сок L. Если список L не пуст, новый элемент вставляется вслед  за
текущим; если список пуст, новый элемент становится первым. В лю-
бом случае новый элемент становится текущим элементом списка.

procedure LtDelete ( var L: List)  {УДАЛИТЬ элемент}
Требования: Список L не пуст.
Результаты: Удаляет текущий элемент из списка L. Если в результа-
те список L не пуст, элемент, который следовал за удаленным  ста-
новится текущим; если удаленный элемент был в конце списка, теку-
щим становится первый элементом списка.

function LtCurrent ( var L: List) : LTem   {ТЕКУЩИЙ элемент}
Требования: Список L не пуст.
Результаты: Возвращает значение текущего элемента из списка L.

procedure LtReplace ( var L: List, NewElem: LTem)  {ЗАМЕНИТЬ элемент}
Требования: Список L не пуст.
Результаты: Заменяет значение текущего элемента из  списка  L  на
NewElem.

procedure LtGoNext ( var L: List )  {ПЕРЕЙТИ на СЛЕДУЮЩИЙ элемент}
Требования: Список L не пуст и текущий элемент не последний.
Результаты: Элемент, непосредственно следующий за текущим, стано-
вится текущим элементом списка L.

procedure LtGoPrior ( var L: List )  {ПЕРЕЙТИ на ПРЕДЫДУЩИЙ элемент}
Требования: Список L не пуст и текущий элемент не первый.
Результаты:  Элемент,  непосредственно  предшествующий  текущему,
становится текущим элементом списка L.

procedure LtGoBegin ( var L: List )  {ПЕРЕЙТИ на ПЕРВЫЙ элемент}
Требования: Список L не пуст.
Результаты: Элемент в начале списка становится текущим  элементом
списка L.

procedure LtGoEnd ( var L: List )  {ПЕРЕЙТИ на ПОСЛЕДНИЙ элемент}
Требования: Список L не пуст.
Результаты: Элемент в конце  списка становится текущим  элементом
списка L.

function LtNotEmpty ( var L: List) : Boolean   {Список НЕ ПУСТ}
Требования: Список L создан.
Результаты: Возвращает значение TRUE, если список L  не  пуст,  в
противном случае возвращает FALSE.

function LtNotFull ( var L: List) : Boolean   {Список НЕ ПОЛОН}
Требования: Список L создан.
Результаты: Возвращает значение TRUE, если список L не  полон,  в
противном случае возвращает FALSE.

function LtAtBegin ( var L: List) : Boolean   {НАЧАЛО списка}
Требования: Список L не пуст.
Результаты: Возвращает  значение  TRUE,  если  текущим  элементом
списка L является первый, в противном случае возвращает FALSE.

function LtAtEnd ( var L: List) : Boolean      {КОНЕЦ списка}
Требования: Список L не пуст.
Результаты: Возвращает  значение  TRUE,  если  текущим  элементом
списка L является последний, в противном случае возвращает FALSE.

procedure LtClear ( var L: List )  {ОЧИСТИТЬ список}
Требования: Список L создан.
Результаты: Удалены все элементы списка L.

procedure LtShow ( var L: List )  {ПОКАЗАТЬ список}
{Замечание. Эта операция формально не входит в СписокАТД и  пред-
назначена только для отладки. В простейшем случае  она  предпола-
гает, что элемент списка можно отобразить непосредственно операто-
ром Write().}
Требования: Список L  создан.
Результаты: Отображает все элементы  списка  L,  если  список  не
пуст, в противном случае выводит сообщение "Список пуст".


               2. Задание

Используя текстовые файлы Spisok.lab, U1.pas, Test.pas реализовать тип
данных,  представляющий  собой  описание  линейного  двусвязного списка и
построить тестовую программу, демонстрирующую работоспособность операций
над списком.
Отчет о работе представить в виде текстов программ.
